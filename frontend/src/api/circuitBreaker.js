// -----------------[ORIGINAL CIRCULT BREAKER]-------------------]
let failureCount = 0;
let successCount = 0;
let state = 'CLOSED';
let openedAt = null; // Th·ªùi ƒëi·ªÉm chuy·ªÉn sang OPEN

const FAILURE_THRESHOLD = 3;
const SUCCESS_THRESHOLD = 2;
const RESET_TIMEOUT = 10000; // 10 gi√¢y

export const getCircuitState = () => ({ state, openedAt, RESET_TIMEOUT });

export const circuitBreaker = async (action) => {
  // N·∫øu ƒëang OPEN, ki·ªÉm tra xem ƒë√£ h·∫øt th·ªùi gian ch∆∞a
  if (state === 'OPEN') {
    const timeElapsed = Date.now() - openedAt;
    if (timeElapsed >= RESET_TIMEOUT) {
      state = 'HALF_OPEN';
      successCount = 0;
      failureCount = 0;
      openedAt = null;
      console.warn('üîÑ Circuit breaker transitioned to HALF_OPEN state.');
    } else {
      console.warn('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è Circuit breaker is OPEN. Rejecting request.');
      throw new Error('Circuit breaker is OPEN');
    }
  }

  try {
    const result = await action();

    if (state === 'HALF_OPEN') {
      successCount++;
      console.log('‚û°Ô∏è Success count in HALF_OPEN:', successCount);

      if (successCount >= SUCCESS_THRESHOLD) {
        state = 'CLOSED';
        failureCount = 0;
        successCount = 0;
        openedAt = null;
        console.log('üîÑÔ∏è Circuit breaker transitioned to CLOSED state.');
      }
    }

    return result;
  } catch (error) {
    failureCount++;
    console.error('‚û°Ô∏è Action failed. Failure count:', failureCount);

    if (failureCount >= FAILURE_THRESHOLD && state !== 'OPEN') {
      state = 'OPEN';
      openedAt = Date.now();
      console.warn('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è Circuit breaker transitioned to OPEN state.');
    }

    throw error;
  }
};



// -----------------[CUSTOM CIRCULT BREAKER]-------------------]

// let failureCount = 0;
// let state = 'CLOSED';
// let openedAt = null; // Th·ªùi ƒëi·ªÉm chuy·ªÉn sang OPEN

// const FAILURE_THRESHOLD = 3;
// const RESET_TIMEOUT = 30000;
// const RESPONSE_TIMEOUT = 5000;

// export const getCircuitState = () => ({ state, openedAt, RESET_TIMEOUT });

// export const circuitBreaker = async (action) => {
//   // Ki·ªÉm tra tr·∫°ng th√°i OPEN v√† th·ªùi gian ƒë√£ tr√¥i qua
//   if (state === 'OPEN') {
//     const timeElapsed = Date.now() - openedAt; // Th·ªùi gian ƒë√£ tr√¥i qua k·ªÉ t·ª´ khi OPEN
//     if (timeElapsed >= RESET_TIMEOUT) {
//       // N·∫øu ƒë√£ ƒë·ªß th·ªùi gian, chuy·ªÉn sang HALF_OPEN
//       state = 'HALF_OPEN';
//       failureCount = 0;
//       openedAt = null;
//       console.warn('Circuit breaker transitioned to HALF_OPEN state.');
//     } else {
//       // N·∫øu ch∆∞a ƒë·ªß th·ªùi gian, t·ª´ ch·ªëi request m√† kh√¥ng reset th·ªùi gian ƒë·∫øm ng∆∞·ª£c
//       console.warn('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è Circuit breaker is OPEN. Rejecting request.');
//       throw new Error('Circuit breaker is OPEN');
//     }
//   }

//   try {
//     const result = await Promise.race([
//       action(),
//       new Promise((_, reject) =>
//         setTimeout(() => reject(new Error('Action timed out')), RESPONSE_TIMEOUT)
//       ),
//     ]);

//     // N·∫øu th√†nh c√¥ng, reset tr·∫°ng th√°i n·∫øu ƒëang ·ªü HALF_OPEN
//     if (state === 'HALF_OPEN') {
//       state = 'CLOSED';
//       failureCount = 0;
//       openedAt = null;
//       console.warn('Circuit breaker transitioned to CLOSED state.');
//     }

//     return result;

//   } catch (error) {
//     failureCount++;
//     console.error('‚û°Ô∏è Action failed or timed out. Failure count:', failureCount);

//     // N·∫øu ƒë·∫°t ng∆∞·ª°ng l·ªói v√† kh√¥ng ph·∫£i ƒëang ·ªü tr·∫°ng th√°i OPEN
//     if (failureCount >= FAILURE_THRESHOLD && state !== 'OPEN') {
//       state = 'OPEN';
//       openedAt = Date.now(); // L∆∞u th·ªùi ƒëi·ªÉm OPEN
//       console.warn('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è Circuit breaker transitioned to OPEN state.');
//     }

//     throw error;
//   }
// };


